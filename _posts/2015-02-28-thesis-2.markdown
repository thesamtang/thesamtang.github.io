---
layout: post
title: "Thesis[2] - Exploration: Omnipresent LEDs"
date: 2015-02-28
categories: thesis
---

Now that we've defined what an interaction looks like, the question becomes: how do we move beyond simply generating interaction and develop personal relationships as well? Furthermore, how do we physically detect or model the development of a relationship between two people?

![The LEDs][fig1]
**Figure 1.** Typical interaction feedback loop between two people

Imagine if the architecture around you was able to display the level of intimacy you have with the people in your immediate vicinity. In our case, I think it would be useful to, rather than directly display such a measure, simulate or mock it based on a certain set of actions in order to influence certain social behaviors. For example, a strip of LEDs and motion sensors could be built into every wall of every building such that it was able to sense your presence at all times (Figure 1). The LEDs nearest to you would glow warm or cold based on a measure how much you were interacting with the people around you.

One way to determine this value would be to have the sensors calculate your speed and proximity to the nearest person. If you both continue past each other at the same speed, this indicates that you did not interact with each other. If both of your speeds slow down, and possibly even stop, the LEDs would glow with warmer colors, indicating that both of you acknowledged each other and perhaps even stopped to chat.

This visual response from the architecture itself is used as a simulation of intimacy in order to reinforce the interaction rather than directly measure some level interaction between the participants. This is an important distinction, as the simulation allows us to somewhat actively influence the interaction using our own predefined conditions rather than passively relay information. I've used the changing color of the LED here as a way to invite the participants and notify them that a certain state has changed, and this hopefully can be used to initiate and set off the interaction loop.

To begin testing this idea, I put together a small prototype using an an array of 6 LEDs connected to an Arduino, and using a Leap Motion controller as input. The Leap has the ability to track hand position, which I'm using here to simulate a person. I've also used the Johnny-Five Node.JS module in order to interface between the Leap and the Arduino. LEDs in the array are turned on based on hand position, and the brightness of the active LED is calculated using the speed of hand movement (I used brightness instead of color because I currently only have single-color LEDs on hand). Below is the code I used and a short video demonstration:

```javascript
var webSocket = require('ws'),
	ws = new webSocket('ws://127.0.0.1:6437'),
	five = require('johnny-five'),
	LeapFrame = require('./lib/leapFrame'),
	board = new five.Board(),
	ledPins = [11, 10, 9, 6, 5, 3],
	leds = [],
	frame;

// Returns log base 2 value of input
var log2 = function(val) {
	return Math.log(val) / Math.LN2;
}

board.on('ready', function() {
	// Set up the LED's
	for (var x = 0; x < ledPins.length; x++) {
		leds.push(new five.Led(ledPins[x]));
	}

	var currentLed = 0,
		i = 0,
		lastPosition,
		currentPosition,
		ledPosition,
		speedValue,
		brightness;

	// When a message is received from the socket, the palm position and displacement
	// from the last reading are calculated. These are used to determine which LED
	// should be lit and how bright it should be. The greater the displacement, the 
	// dimmer the LED. This means the LED will get brighter as the hand slows down.
	ws.on('message', function(data, flags) {
		i++;
		if (i % 3 == 0) { // 40fps
			frame = new LeapFrame(data);
			if (frame.valid) {

				// get x position of palm and map it to [0,6) using an x range of
				// [0, 240)
				currentPosition = frame.palmPosition.x + 120;
				ledPosition = Math.floor(currentPosition / 40);

				// taking log value of position difference yields values in range
				// [0, ~6), which are good thresholds for LED brightness
				speedValue = Math.floor(log2(Math.abs(currentPosition - lastPosition) + 1));
				console.log(speedValue);

				brightness = 255 / (speedValue + 1);

				// check if ledPosition index is within valid array range
				// if it is, update the ledPosition and activate that led
				// after turning off the previous one. (7 - i b/c I wired it backwards)
				if (ledPosition >= 0 && ledPosition < 6) {
					leds[currentLed].off();
					currentLed = ledPosition;
					//leds[7 - currentLed].on();
					leds[currentLed].brightness(brightness);
				}

				// Update lastPosition to use value from current reading
				lastPosition = currentPosition;
			}
		}
	});
});
```

<a href="http://www.youtube.com/watch?feature=player_embedded&v=YOUTUBE_VIDEO_ID_HERE
" target="_blank"><img src="http://img.youtube.com/vi/YOUTUBE_VIDEO_ID_HERE/0.jpg" 
alt="IMAGE ALT TEXT HERE" width="240" height="180" border="10" /></a>

There are of course other ways to signify changes in the interaction. For example, certain physiological changes such as [heartrate][1] or [breathing patterns][2] can synchronize between two people who share an intimate relationship. Rather than change the color of the LED, it could be pulsing at all times, perhaps even in tune to your actual heartbeat via sensor, and sync up when you and a person near you fulfill the conditions for an interaction. There are plenty of possibilities.

More to come in the next post, stay tuned.

[1]: http://news.nationalgeographic.com/news/2011/05/110504-fire-walking-hearts-beat-science-health-heartbeats
[2]: http://medicalxpress.com/news/2013-02-lovers-hearts-sync.html
[fig1]: /img/thesis/led-diagram.png